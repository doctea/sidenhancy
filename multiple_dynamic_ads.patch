diff --git a/src/sid_parameters.cpp b/src/sid_parameters.cpp
index d42c331..aec594e 100644
--- a/src/sid_parameters.cpp
+++ b/src/sid_parameters.cpp
@@ -17,66 +17,49 @@
 
 #include "LinkedList.h"
 
-// Parameters, ie wrappers around destination object
-LinkedList<DataParameter*>      available_parameters    = LinkedList<DataParameter*>();
-
-DataParameter       param_none                              = DataParameter("None");
-FrequencyParameter  param_overall_pitch                     = FrequencyParameter<SID6581,double> ("Overall pitch", &sid, 0.0, &SID6581::setAllFrequency);
-Parameter           param_overall_pulsewidth_modulation     = Parameter<SID6581,double> ("Overall PW Mod", &sid, 0.0, &SID6581::modulateAllPulseWidths);
-Parameter           param_overall_pitch_modulation          = Parameter<SID6581,double> ("Overall Pitch Mod", &sid, 0.0, &SID6581::modulateAllPitches);
 
-Parameter           param_filter_cutoff                     = Parameter<SID6581,double> ("Filter cutoff", &sid, 0.0, &SID6581::setCutoff);
-Parameter           param_filter_resonance                  = Parameter<SID6581,double> ("Filter res", &sid, 0.0, &SID6581::setResonanceD);
-
-ToggleParameter     param_filter_lowpass   = ToggleParameter<SID6581,bool> ("Filter LP", &sid, sid.isFilterTypeLP(), &SID6581::setFilterTypeLP);
-ToggleParameter     param_filter_bandpass  = ToggleParameter<SID6581,bool> ("Filter BP", &sid, sid.isFilterTypeBP(), &SID6581::setFilterTypeBP);
-ToggleParameter     param_filter_highpass  = ToggleParameter<SID6581,bool> ("Filter HP", &sid, sid.isFilterTypeHP(), &SID6581::setFilterTypeHP);
-ToggleParameter     param_filter_off3      = ToggleParameter<SID6581,bool> ("Filter Off3", &sid, sid.isFilterTypeOff3(), &SID6581::setFilterTypeOff3);
+LinkedList<VoltageSourceBase*> voltage_sources = LinkedList<VoltageSourceBase*> ();
 
-/*FrequencyParameter  param_osc_1_pitch                       = FrequencyParameter<Voice,double> ("Osc 1 pitch", &sid.voice[0], &Voice::setFrequency);
-FrequencyParameter  param_osc_2_pitch                       = FrequencyParameter<Voice,double> ("Osc 2 pitch", &sid.voice[1], &Voice::setFrequency);
-FrequencyParameter  param_osc_3_pitch                       = FrequencyParameter<Voice,double> ("Osc 3 pitch", &sid.voice[2], &Voice::setFrequency);*/
 
-/*Parameter           param_osc_1_waveforms                   = Parameter<Voice,double> ("Osc 1 wave", &sid.voice[0], &Voice::setOsc);
-Parameter           param_osc_2_waveforms                   = Parameter<Voice,double> ("Osc 2 wave", &sid.voice[1], &Voice::setOsc);
-Parameter           param_osc_3_waveforms                   = Parameter<Voice,double> ("Osc 3 wave", &sid.voice[2], &Voice::setOsc);*/
+/////// PARAMETER INPUTS & VOLTAGE SOURCES
 
-LinkedList<VoltageSourceBase*> voltage_sources = LinkedList<VoltageSourceBase*> ();
+//#define ENABLE_ADS_24V
+#define ENABLE_ADS_x48
 
-#ifdef ADS24V
-    #define ADSCLASS    ADS1015
-    #define MAX_INPUT_VOLTAGE 10.0
-    ADSCLASS ADS_OBJECT_1(0x48);
-    //ADS1015 ADS_OBJECT_2(0x49);
-#else
-    #define ADSCLASS    ADS1115
-    #define MAX_INPUT_VOLTAGE 5.0
-    ADSCLASS ADS_OBJECT_1(0x48);
+#ifdef ENABLE_ADS_24V
+    #define MAX_INPUT_VOLTAGE_24V 10.0
+    ADS1015 ADS_OBJECT_24V(0x49);
+    ADSVoltageSource<ADS1015> voltage_source_1_channel_0 = ADSVoltageSource<ADS1015>(&ADS_OBJECT_24V, 0, MAX_INPUT_VOLTAGE_24V);
+    ADSVoltageSource<ADS1015> voltage_source_1_channel_1 = ADSVoltageSource<ADS1015>(&ADS_OBJECT_24V, 1, MAX_INPUT_VOLTAGE_24V);
+    ADSVoltageSource<ADS1015> voltage_source_1_channel_2 = ADSVoltageSource<ADS1015>(&ADS_OBJECT_24V, 2, MAX_INPUT_VOLTAGE_24V);
 #endif
 
-ADSVoltageSource<ADSCLASS> voltage_source_1_channel_0 = ADSVoltageSource<ADSCLASS>(&ADS_OBJECT_1, 0, MAX_INPUT_VOLTAGE);
-ADSVoltageSource<ADSCLASS> voltage_source_1_channel_1 = ADSVoltageSource<ADSCLASS>(&ADS_OBJECT_1, 1, MAX_INPUT_VOLTAGE);
-ADSVoltageSource<ADSCLASS> voltage_source_1_channel_2 = ADSVoltageSource<ADSCLASS>(&ADS_OBJECT_1, 2, MAX_INPUT_VOLTAGE);
-
-/*ADSVoltageSource<ADS1015> source_2_channel_0 = ADSVoltageSource<ADS1015>(&ADS_OBJECT_2, 0);
-ADSVoltageSource<ADS1015> source_2_channel_1 = ADSVoltageSource<ADS1015>(&ADS_OBJECT_2, 1);
-ADSVoltageSource<ADS1015> source_2_channel_2 = ADSVoltageSource<ADS1015>(&ADS_OBJECT_2, 2);*/
+#ifdef ENABLE_ADS_x48
+    #define MAX_INPUT_VOLTAGE_x48 5.0
+    ADS1115 ADS_OBJECT_x48(0x48);
+    ADSVoltageSource<ADS1115> voltage_source_2_channel_0 = ADSVoltageSource<ADS1115>(&ADS_OBJECT_x48, 0, MAX_INPUT_VOLTAGE_x48);
+    ADSVoltageSource<ADS1115> voltage_source_2_channel_1 = ADSVoltageSource<ADS1115>(&ADS_OBJECT_x48, 1, MAX_INPUT_VOLTAGE_x48);
+    ADSVoltageSource<ADS1115> voltage_source_2_channel_2 = ADSVoltageSource<ADS1115>(&ADS_OBJECT_x48, 2, MAX_INPUT_VOLTAGE_x48);
+    ADSVoltageSource<ADS1115> voltage_source_2_channel_3 = ADSVoltageSource<ADS1115>(&ADS_OBJECT_x48, 3, MAX_INPUT_VOLTAGE_x48);
+#endif
 
 void setup_voltage_sources() {
-    ADS_OBJECT_1.begin();
-    #ifdef ADS24V
-        ADS_OBJECT_1.setGain(2);
-    #else
-        ADS_OBJECT_1.setGain(0);
+    #ifdef ENABLE_ADS_x48
+        ADS_OBJECT_x48.begin();
+        ADS_OBJECT_x48.setGain(0);
+        voltage_sources.add(&voltage_source_2_channel_0);
+        voltage_sources.add(&voltage_source_2_channel_1);
+        voltage_sources.add(&voltage_source_2_channel_2);
+        voltage_sources.add(&voltage_source_2_channel_3);
+    #endif
+    
+    #ifdef ENABLE_ADS_24V
+        ADS_OBJECT_24V.begin();
+        ADS_OBJECT_24V.setGain(2);
+        voltage_sources.add(&voltage_source_1_channel_0);
+        voltage_sources.add(&voltage_source_1_channel_1);
+        voltage_sources.add(&voltage_source_1_channel_2);
     #endif
-
-    voltage_sources.add(&voltage_source_1_channel_0);
-    voltage_sources.add(&voltage_source_1_channel_1);
-    voltage_sources.add(&voltage_source_1_channel_2);
-
-    /*voltage_sources.add(&source_2_channel_0);
-    voltage_sources.add(&source_2_channel_1);
-    voltage_sources.add(&source_2_channel_2);*/
 }
 
 void update_voltage_sources() {
@@ -85,6 +68,26 @@ void update_voltage_sources() {
     }
 }
 
+// ParameterInputs, ie wrappers around input mechanism, assignable to a Parameter
+LinkedList<BaseParameterInput*> available_inputs            = LinkedList<BaseParameterInput*>();
+
+
+// Parameters, ie wrappers around destination object
+LinkedList<DataParameter*>      available_parameters    = LinkedList<DataParameter*>();
+
+DataParameter       param_none                              = DataParameter("None");
+FrequencyParameter  param_overall_pitch                     = FrequencyParameter<SID6581,double> ("Overall pitch", &sid, 0.0, &SID6581::setAllFrequency);
+Parameter           param_overall_pulsewidth_modulation     = Parameter<SID6581,double> ("Overall PW Mod", &sid, 0.0, &SID6581::modulateAllPulseWidths);
+Parameter           param_overall_pitch_modulation          = Parameter<SID6581,double> ("Overall Pitch Mod", &sid, 0.0, &SID6581::modulateAllPitches);
+
+Parameter           param_filter_cutoff                     = Parameter<SID6581,double> ("Filter cutoff", &sid, 0.0, &SID6581::setCutoff);
+Parameter           param_filter_resonance                  = Parameter<SID6581,double> ("Filter res", &sid, 0.0, &SID6581::setResonanceD);
+
+ToggleParameter     param_filter_lowpass   = ToggleParameter<SID6581,bool> ("Filter LP", &sid, sid.isFilterTypeLP(), &SID6581::setFilterTypeLP);
+ToggleParameter     param_filter_bandpass  = ToggleParameter<SID6581,bool> ("Filter BP", &sid, sid.isFilterTypeBP(), &SID6581::setFilterTypeBP);
+ToggleParameter     param_filter_highpass  = ToggleParameter<SID6581,bool> ("Filter HP", &sid, sid.isFilterTypeHP(), &SID6581::setFilterTypeHP);
+ToggleParameter     param_filter_off3      = ToggleParameter<SID6581,bool> ("Filter Off3", &sid, sid.isFilterTypeOff3(), &SID6581::setFilterTypeOff3);
+
 void add_voice_parameters(LinkedList<DataParameter*> *available_parameters, int voice_number) {
     char label[40] = "            ";
     Voice *voice = &sid.voice[voice_number];
@@ -135,25 +138,11 @@ void add_voice_parameters(LinkedList<DataParameter*> *available_parameters, int
     available_parameters->add(param2);
 }
 
-// ParameterInputs, ie wrappers around input mechanism, assignable to a Parameter
-LinkedList<BaseParameterInput*> available_inputs            = LinkedList<BaseParameterInput*>();
-
-VoltageParameterInput<BaseParameter> input_A = VoltageParameterInput<BaseParameter>('A', &voltage_source_1_channel_0);
-VoltageParameterInput<BaseParameter> input_B = VoltageParameterInput<BaseParameter>('B', &voltage_source_1_channel_0);
-VoltageParameterInput<BaseParameter> input_C = VoltageParameterInput<BaseParameter>('C', &voltage_source_1_channel_1);
-VoltageParameterInput<BaseParameter> input_D = VoltageParameterInput<BaseParameter>('D', &voltage_source_1_channel_1);
-VoltageParameterInput<BaseParameter> input_E = VoltageParameterInput<BaseParameter>('E', &voltage_source_1_channel_2);
-VoltageParameterInput<BaseParameter> input_F = VoltageParameterInput<BaseParameter>('F', &voltage_source_1_channel_2);
-
-// menu item for direct control over a Parameter via menu
-//ParameterMenuItem PulseWidthModulationPanel("Pulse width mod", &param_overall_pulsewidth_modulation);
-
 void setup_parameters() {
+    // add the available parameters to a list used globally and later passed to each selector menuitem
     Serial.println(F("==== begin setup_parameters ===="));
-    //input_A.setTarget(&param_overall_pitch);
-    //input_B.setTarget(&param_overall_pulsewidth_modulation);
-
-    // add the available parameters to a list used globally and later passed to each selector menuitem 
+    
+    // global sid parameters
     available_parameters.add(&param_none);
     available_parameters.add(&param_overall_pitch);
     available_parameters.add(&param_overall_pitch_modulation);
@@ -166,20 +155,7 @@ void setup_parameters() {
     available_parameters.add(&param_filter_highpass);
     available_parameters.add(&param_filter_off3);
 
-    /*available_parameters.add(&param_osc_1_pitch);
-    available_parameters.add(&param_osc_2_pitch);
-    available_parameters.add(&param_osc_3_pitch);*/
-
-    /*available_parameters.add(&param_osc_1_waveforms);
-    available_parameters.add(&param_osc_2_waveforms);
-    available_parameters.add(&param_osc_3_waveforms);*/
-
-    /*available_parameters.add(&param_osc_1_triangle);
-    available_parameters.add(&param_osc_1_saw);
-    available_parameters.add(&param_osc_1_pulse);*/
-
-    //param_overall_pitch.debug = true;
-
+    // add the parameters for each voice
     available_parameters.add(
         new ToggleParameter<SID6581,bool>("Osc 1 Filt", &sid, sid.isFilterVoice0On(), &SID6581::changeFilterVoice0)
     );
@@ -195,28 +171,27 @@ void setup_parameters() {
     );
     add_voice_parameters(&available_parameters, 2);    
 
-    input_D.setInverted();
-    //input_H.setInverted();
-
-    input_D.map_unipolar = true;    
-
-    available_inputs.add(&input_A);
-    available_inputs.add(&input_B);
-    available_inputs.add(&input_C);
-    available_inputs.add(&input_D);
-    available_inputs.add(&input_E);
-    available_inputs.add(&input_F);
-    //available_inputs.add(&input_G);        
-    //available_inputs.add(&input_H);
+    // Dynamically create ParameterInputs based on the voltage_sources array
+    char name = 'A';
+    Serial.println("About to dynamically create ParameterInputs...");
+    for (int i = 0 ; i < voltage_sources.size() ; i++) {
+        Serial.printf("\tDynamically creating input %c...\n", name); Serial.flush();
+        VoltageParameterInput<BaseParameter> *vpi = new VoltageParameterInput<BaseParameter>(name, voltage_sources.get(i));
+        Serial.println("\tInstantiated, adding to available_inputs!");
+        available_inputs.add(vpi);
+        name++;
+
+        /*vpi = new VoltageParameterInput<BaseParameter>(name, voltage_sources.get(i));
+        vpi->setInverted();
+        available_inputs.add(vpi);
+        name++;*/
+    }
 
     Serial.println("==== end setup_parameters ====");
 }
 
 // called every loop to update the inputs; maybe in future we also eventually want to process internal LFOs or other properties of parameter here
 void update_parameters() {
-    //Serial.println("update_parameters..");
-    //input_A.loop();
-    //input_B.loop();
     for (int i = 0 ; i < available_inputs.size() ; i++) {
         available_inputs.get(i)->loop();
         //parameter_inputs[i]->loop();
@@ -243,7 +218,7 @@ void setup_parameter_menu() {
         Serial.printf("%i: Creating control labelled '%s'...\n", i, input_label);
         ParameterSelectorControl *ctrl = new ParameterSelectorControl(input_label);
 
-        Serial.printf("%i:\tConfiguring it with available_inputs item target '%s'..\n", i, param->label);
+        Serial.printf("\tConfiguring it with available_inputs item target '%s'..\n", i, param->label);
         //BaseParameterInput *param_input = available_inputs.get(i);
         ctrl->configure(param_input, &available_parameters);
 
